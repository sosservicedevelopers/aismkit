// <auto-generated />
using System;
using AisMKIT.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AisMKIT.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191215061417_A3")]
    partial class A3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AisMKIT.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentsId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentsId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AisMKIT.Models.ClNagradTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClNagradTypes");
                });

            modelBuilder.Entity("AisMKIT.Models.ClOKNTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClOKNTypes");
                });

            modelBuilder.Entity("AisMKIT.Models.ClObjProizIskusCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClObjProizIskusCategory");
                });

            modelBuilder.Entity("AisMKIT.Models.ClObjProizIskusTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClObjProizIskusTypes");
                });

            modelBuilder.Entity("AisMKIT.Models.ClServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClServices");
                });

            modelBuilder.Entity("AisMKIT.Models.ClUchZavedCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Desciption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClUchZavedCategory");
                });

            modelBuilder.Entity("AisMKIT.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contacts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("AisMKIT.Models.DictAgencyPerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictAgencyPerm");
                });

            modelBuilder.Entity("AisMKIT.Models.DictDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictDistrict");
                });

            modelBuilder.Entity("AisMKIT.Models.DictLangMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictLangMediaType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictLegalForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictLegalForm");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaFinSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictMediaFinSource");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaFreqRelease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictMediaFreqRelease");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictMediaType");
                });

            modelBuilder.Entity("AisMKIT.Models.DictRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeactiveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusForDictId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusForDictId");

                    b.ToTable("DictRegion");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEducations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClUchZavedCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DomenNames")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClUchZavedCategoryId");

                    b.ToTable("ListOfEducations");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPay")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DictAgencyPermId")
                        .HasColumnType("int");

                    b.Property<int?>("DictDistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("DictLangMediaTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("DictMediaFinSourceId")
                        .HasColumnType("int");

                    b.Property<int?>("DictMediaFreqReleaseId")
                        .HasColumnType("int");

                    b.Property<int?>("DictMediaTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EliminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("INN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameKyrg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameRus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumOfPermGas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPermission")
                        .HasColumnType("int");

                    b.Property<DateTime>("PermElimGASDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PermGASDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PermissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReregistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DictAgencyPermId");

                    b.HasIndex("DictDistrictId");

                    b.HasIndex("DictLangMediaTypeId");

                    b.HasIndex("DictMediaFinSourceId");

                    b.HasIndex("DictMediaFreqReleaseId");

                    b.HasIndex("DictMediaTypeId");

                    b.ToTable("ListOfMedia");
                });

            modelBuilder.Entity("AisMKIT.Models.StatusForDict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusForDict");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "включён"
                        },
                        new
                        {
                            Id = 2,
                            Name = "отключён"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AisMKIT.Models.ApplicationUser", b =>
                {
                    b.HasOne("AisMKIT.Models.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.DictAgencyPerm", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictDistrict", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictLangMediaType", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictLegalForm", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaFinSource", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaFreqRelease", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictMediaType", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.DictRegion", b =>
                {
                    b.HasOne("AisMKIT.Models.StatusForDict", "StatusForDict")
                        .WithMany()
                        .HasForeignKey("StatusForDictId");
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfEducations", b =>
                {
                    b.HasOne("AisMKIT.Models.ClUchZavedCategory", "ClUchZavedCategory")
                        .WithMany()
                        .HasForeignKey("ClUchZavedCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AisMKIT.Models.ListOfMedia", b =>
                {
                    b.HasOne("AisMKIT.Models.DictAgencyPerm", "DictAgencyPerm")
                        .WithMany()
                        .HasForeignKey("DictAgencyPermId");

                    b.HasOne("AisMKIT.Models.DictDistrict", "DictDistrict")
                        .WithMany()
                        .HasForeignKey("DictDistrictId");

                    b.HasOne("AisMKIT.Models.DictLangMediaType", "DictLangMediaType")
                        .WithMany()
                        .HasForeignKey("DictLangMediaTypeId");

                    b.HasOne("AisMKIT.Models.DictMediaFinSource", "DictMediaFinSource")
                        .WithMany()
                        .HasForeignKey("DictMediaFinSourceId");

                    b.HasOne("AisMKIT.Models.DictMediaFreqRelease", "DictMediaFreqRelease")
                        .WithMany()
                        .HasForeignKey("DictMediaFreqReleaseId");

                    b.HasOne("AisMKIT.Models.DictMediaType", "DictMediaType")
                        .WithMany()
                        .HasForeignKey("DictMediaTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AisMKIT.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
